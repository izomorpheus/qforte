from typing import overload, List

class Gate:
    def target(self) -> int: ...
    def control(self) -> int: ...
    def gate_id(self) -> str: ...
    def gate(self) -> List[List[complex]]: ...
    def sparse_matrix(self) -> SparseMatrix: ...
    def adjoint(self) -> Gate: ...
    def param(self) -> complex: ...
    def str(self) -> str: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

@overload
def gate(gate_id: str, target: int) -> Gate: 
    '''Create a one-qubit gate without parameter.
    gate_id can be "X", "Y", "Z", "H","V", "S", "T", "I", "Rzy"'''
    ...

@overload
def gate(gate_id: str, target: int, param: complex) -> Gate:
    '''Create a one-qubit gate with parameter.
    gate_id can be "R", "Rx", "Ry", "Rz", "rU1"'''
    ...

@overload
def gate(gate_id: str, target: int, control: int) -> Gate:
    '''Create a two-qubit gate without parameter.
    gate_id can be "CNOT", "cX", "aCNOT", "acX", "cY", "cZ", "cV", SWAP"'''
    ...

@overload
def gate(gate_id: str, target: int, control: int, param: complex) -> Gate:
    '''Create a two-qubit gate with parameter.
    gate_id can be "A", "cR", "cRz", "rU2"'''
    ...

def control_gate(control: int, gate: Gate) -> Gate:
    '''Create a control gate from a single qubit-gate'''
    ...

class Circuit:
    def __init__(self) -> None:
        '''Instantiate an empty Circuit'''
        ...
    def add_gate(self, gate: Gate) -> None:
        '''add a Gate'''
        ...
    def add_circuit(self, circ: Circuit) -> None:
        '''add a Circuit'''
        ...
    def gates(self) -> List[Gate]:
        '''Return a list of Gates
        in this Circuit'''
        ...
    def sparse_matrix(self) -> SparseMatrix:
        '''Return a SparseMatrix representing this circuit'''
        ...
    def size(self) -> int:
        '''Return the number of gates in this circuit'''
        ...
    def adjoint(self) -> Circuit:
        '''Return the adjoint of this circuit'''
        ...
    def canonicalize_pauli_circuit(self) -> complex:
        '''For a pauli circuit, order gates from smallest to largest target index,
        and combine gates with the same target. Return the complex prefactor resulting
        from the combination.'''
        ...
    def set_parameters(self, params: List[float]) -> None:
        '''Reset the parameters of all Rz gates in the circuit,
        based on a list of real numbers.'''
        ...
    def get_num_cnots(self) -> int:
        '''Return the number of CX gates in the circuit'''
        ...
    def str(self) -> str:
        '''Return a string representation of the circuit'''
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
        
class SparseMatrix:
    def __init__(self) -> None: ...
